diff --git a/hibernate-core-jakarta/hibernate-core-jakarta.gradle b/hibernate-core-jakarta/hibernate-core-jakarta.gradle
index 802fea1831..e9b36e2a1e 100644
--- a/hibernate-core-jakarta/hibernate-core-jakarta.gradle
+++ b/hibernate-core-jakarta/hibernate-core-jakarta.gradle
@@ -306,7 +306,7 @@ test {
 		jvmArgs( ['--add-opens', 'java.base/java.lang=ALL-UNNAMED'] )
 	}
 
-	maxHeapSize = '3G'
+	maxHeapSize = '1024m'
 	// Allow to exclude specific tests
 	if (project.hasProperty('excludeTests')) {
 		filter {
diff --git a/hibernate-core/src/main/java/org/hibernate/EmptyInterceptor.java b/hibernate-core/src/main/java/org/hibernate/EmptyInterceptor.java
index dde4912ee1..bfe0fc6e6f 100755
--- a/hibernate-core/src/main/java/org/hibernate/EmptyInterceptor.java
+++ b/hibernate-core/src/main/java/org/hibernate/EmptyInterceptor.java
@@ -120,15 +120,4 @@ public class EmptyInterceptor implements Interceptor, Serializable {
 		return sql;
 	}
 
-	@Override
-	public void onCollectionRemove(Object collection, Serializable key) throws CallbackException {
-	}
-
-	@Override
-	public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
-	}
-
-	@Override
-	public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
-	}
 }
diff --git a/hibernate-core/src/main/java/org/hibernate/Interceptor.java b/hibernate-core/src/main/java/org/hibernate/Interceptor.java
index f71df01f64..8fb7f457f5 100644
--- a/hibernate-core/src/main/java/org/hibernate/Interceptor.java
+++ b/hibernate-core/src/main/java/org/hibernate/Interceptor.java
@@ -121,7 +121,9 @@ public interface Interceptor {
 	 *
 	 * @throws CallbackException Thrown if the interceptor encounters any problems handling the callback.
 	 */
-	void onCollectionRecreate(Object collection, Serializable key) throws CallbackException;
+	default boolean onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
+		return true;
+	}
 
 	/**
 	 * Called before a collection is deleted.
@@ -131,7 +133,9 @@ public interface Interceptor {
 	 *
 	 * @throws CallbackException Thrown if the interceptor encounters any problems handling the callback.
 	 */
-	void onCollectionRemove(Object collection, Serializable key) throws CallbackException;
+	default boolean onCollectionRemove(Object collection, Serializable key) throws CallbackException {
+		return true;
+	}
 
 	/**
 	 * Called before a collection is updated.
@@ -141,7 +145,9 @@ public interface Interceptor {
 	 *
 	 * @throws CallbackException Thrown if the interceptor encounters any problems handling the callback.
 	 */
-	void onCollectionUpdate(Object collection, Serializable key) throws CallbackException;
+	default boolean onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
+		return true;
+	}
 
 	/**
 	 * Called before a flush.
diff --git a/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java b/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java
index 98502d8c68..bb43e3114d 100644
--- a/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java
+++ b/hibernate-core/src/main/java/org/hibernate/event/internal/AbstractFlushingEventListener.java
@@ -145,6 +145,28 @@ public abstract class AbstractFlushingEventListener implements JpaBootstrapSensi
 //		for ( Map.Entry me : IdentityMap.concurrentEntries( persistenceContext.getEntityEntries() ) ) {
 			EntityEntry entry = (EntityEntry) me.getValue();
 			Status status = entry.getStatus();
+
+			// This entity will be saved?
+			boolean willBeSaved = true;
+			try {
+				Object o = me.getKey();
+				Class<?> c = o.getClass();
+				Class<?> jpaBase = Class.forName("play.db.jpa.JPABase");
+				while (!c.equals(Object.class)) {
+					if (c.equals(jpaBase)) {
+						willBeSaved = (Boolean) jpaBase.getDeclaredField("willBeSaved").get(o);
+						break;
+					}
+					c = c.getSuperclass();
+				}
+				if (!willBeSaved) {
+					continue;
+				}
+			}
+			catch(ReflectiveOperationException ignore) {
+				// do nothing
+			}
+
 			if ( status == Status.MANAGED || status == Status.SAVING || status == Status.READ_ONLY ) {
 				cascadeOnFlush( session, entry.getPersister(), me.getKey(), anything );
 			}
@@ -260,8 +282,7 @@ public abstract class AbstractFlushingEventListener implements JpaBootstrapSensi
 		final Interceptor interceptor = session.getInterceptor();
 		persistenceContext.forEachCollectionEntry(
 				(coll, ce) -> {
-					if ( ce.isDorecreate() ) {
-						interceptor.onCollectionRecreate( coll, ce.getCurrentKey() );
+					if ( ce.isDorecreate() && interceptor.onCollectionRecreate( coll, ce.getCurrentKey()) ) {
 						actionQueue.addAction(
 								new CollectionRecreateAction(
 										coll,
@@ -271,8 +292,7 @@ public abstract class AbstractFlushingEventListener implements JpaBootstrapSensi
 								)
 						);
 					}
-					if ( ce.isDoremove() ) {
-						interceptor.onCollectionRemove( coll, ce.getLoadedKey() );
+					if ( ce.isDoremove() && interceptor.onCollectionRemove( coll, ce.getLoadedKey() ) ) {
 						actionQueue.addAction(
 								new CollectionRemoveAction(
 										coll,
@@ -283,8 +303,7 @@ public abstract class AbstractFlushingEventListener implements JpaBootstrapSensi
 								)
 						);
 					}
-					if ( ce.isDoupdate() ) {
-						interceptor.onCollectionUpdate( coll, ce.getLoadedKey() );
+					if ( ce.isDoupdate() && interceptor.onCollectionUpdate( coll, ce.getLoadedKey() ) ) {
 						actionQueue.addAction(
 								new CollectionUpdateAction(
 										coll,
diff --git a/hibernate-core/src/test/java/org/hibernate/test/interfaceproxy/DocumentInterceptor.java b/hibernate-core/src/test/java/org/hibernate/test/interfaceproxy/DocumentInterceptor.java
index 9d0e8d4be5..fafe972c27 100755
--- a/hibernate-core/src/test/java/org/hibernate/test/interfaceproxy/DocumentInterceptor.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/interfaceproxy/DocumentInterceptor.java
@@ -94,8 +94,4 @@ public class DocumentInterceptor implements Interceptor {
 		return sql;
 	}
 
-	public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException {}
-	public void onCollectionRemove(Object collection, Serializable key) throws CallbackException {}
-	public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException {}
-
 }
diff --git a/hibernate-core/src/test/java/org/hibernate/test/mixed/DocumentInterceptor.java b/hibernate-core/src/test/java/org/hibernate/test/mixed/DocumentInterceptor.java
index fc1b53f8d2..e5e00d68bb 100755
--- a/hibernate-core/src/test/java/org/hibernate/test/mixed/DocumentInterceptor.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/mixed/DocumentInterceptor.java
@@ -111,12 +111,4 @@ public class DocumentInterceptor implements Interceptor {
 		return sql;
 	}
 
-	public void onCollectionRecreate(Object collection, Serializable key) throws CallbackException {
-	}
-
-	public void onCollectionRemove(Object collection, Serializable key) throws CallbackException {
-	}
-
-	public void onCollectionUpdate(Object collection, Serializable key) throws CallbackException {
-	}
 }
